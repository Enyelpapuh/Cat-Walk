#ifndef FILESYSTEM_H
#define FILESYSTEM_H

#include <string>
#include <cstdlib>
const char * logl_root = "C:/Users/EnyelB/Desktop/Repositorios/LearnOpenGL"; // This is a configuration file generated by CMake.

class FileSystem
{
private:
    typedef std::string(*Builder) (const std::string& path);

public:
    static std::string getPath(const std::string& path)
    {
        static std::string(*pathBuilder)(std::string const&) = getPathBuilder();
        return (*pathBuilder)(path);
    }

private:
    static std::string const& getRoot()
    {
        static std::string root;
        static bool initialized = false;

        if (!initialized)
        {
            char* envRoot = nullptr;
            size_t len = 0;

            // Usar _dupenv_s para obtener la variable de entorno de forma segura
            if (_dupenv_s(&envRoot, &len, "LOGL_ROOT_PATH") == 0 && envRoot != nullptr)
            {
                root = envRoot;
                free(envRoot); // Liberar la memoria asignada por _dupenv_s
            }
            else
            {
                root = logl_root;
            }

            initialized = true;
        }

        return root;
    }

    //static std::string(*foo (std::string const &)) getPathBuilder()
    static Builder getPathBuilder()
    {
        if (getRoot() != "")
            return &FileSystem::getPathRelativeRoot;
        else
            return &FileSystem::getPathRelativeBinary;
    }

    static std::string getPathRelativeRoot(const std::string& path)
    {
        return getRoot() + std::string("/") + path;
    }

    static std::string getPathRelativeBinary(const std::string& path)
    {
        return "../../../" + path;
    }


};

// FILESYSTEM_H
#endif
